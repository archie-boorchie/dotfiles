# Functions for shell (if you use bash shell instead of zsh, change &! to &)

# Preview the differences of two directories using Vim and the Vim plugin
# vim-dirdiff (https://github.com/will133/vim-dirdiff)
function dirdiff()
{
    # Shell-escape each path:
    DIR1=$(printf '%q' "$1"); shift
    DIR2=$(printf '%q' "$1"); shift
    vim $@ -c "DirDiff $DIR1 $DIR2"
}

# Todo-list
function todo()
{
    todofile=~/.todolist.txt
    # create file if not there
    if [ ! -f "$todofile" ]; then
        echo -ne "\nCreating file .todolist.txt in home directory.\n"
        touch "$todofile"
    fi
    # start interactive mode
    while true; do
    # clear empty lines
    sed '/^[[:space:]]*$/d' "$todofile" > .tmptodofile.tmp && mv .tmptodofile.tmp "$todofile"
    # user prompt
    echo -ne "Welcome to the to-do list!\n[a]dd item;\n[p]rint list;\n[e]dit the list;\n[q]uit\n"
    if [ -n "$ZSH_VERSION" ]; then
        read -s -k 1 arg # for zsh shell
    else
        read -rsn1 arg # for bash shell
    fi
    if [[ $arg = "q" ]]; then
        break
    elif [[ $arg = "p" ]]; then
        clear
        less '-RS#3NM~g' "$todofile"
    elif [[ $arg = "a" ]]; then
        clear
        echo -ne "Adding new task (leave empty to abort):\n"
        if [ -n "$ZSH_VERSION" ]; then
            addTask=""
            vared -c addTask # for zsh shell
        else
            read -e addTask # for bash shell
        fi
        echo "$addTask" >> "$todofile"
    elif [[ $arg = "e" ]]; then
        clear
        $EDITOR "$todofile"
    else
        echo -ne "Invalid option. Try again.\n"
    fi
    done
}

# Weather information
weather() {
    echo -ne "\n\nPlease enter a city name:  "
    read mycity
    curl wttr.in/"$mycity"
}

# Create a new directory and instantly jump to that directory
mkdircd () { mkdir -pv $1; cd $1; }

# Use xdg-open in 'silent mode'
o() { xdg-open "$1" >/dev/null 2>&1 &! }

# Use less for pdf view
pdfless() {pdftotext -layout $1 - | less}

# Use man for markdown view
mdless() {pandoc -s -f markdown -t man "$1" | man -l -}

# Avoid nested ranger sessions
ranger() {
    if [ -z "$RANGER_LEVEL" ]; then
        /usr/bin/ranger "$@"
    else
        exit
    fi
}

# To extract any type of file
extract() {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
 else
    for n in $@
    do
      if [ -f "$n" ] ; then
          case "${n%,}" in
            *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar) 
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.rar)       unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.zip)       unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *)
                         echo "extract: '$n' - unknown archive method"
                         return 1
                         ;;
          esac
      else
          echo "'$n' - file does not exist"
          return 1
      fi
    done
fi
}

# System information
function sysinfo()
{
    echo -e "Machine information:" ; uname -a
    echo -e "\nUsers logged on:" ; w -h
    echo -e "\nCurrent date :" ; date
    echo -e "\nMachine status :" ; uptime
    echo -e "\nMemory status :" ; free
    echo -e "\nFilesystem status :"; df -h
    echo -e " "
}

# Colourful man pages
man() {
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}

# A function to change permissions of a folder in the default ones
# Useful when copying from ntfs drives that don't recognise Linux permissions
permissionssetdefault() {
if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Give the name of the directory which you wish to return to default permissions."
else
    for n in $@
    do
        # verify users choice
        echo "You chose directory  $n."
        echo "Are you sure you want to change permissions (y/N)?"
        read yn
        yn=${yn:-no}
        if [ $yn = "yes" -o $yn = "y" -o $yn = "YES" -o $yn = "Y" ]; then
            find "$n" -type d -exec chmod 755 {} ";"
            find "$n" -type f -exec chmod 644 {} ";"
            else
            echo "Aborting..."
        fi
    done
fi
}

# Convert greek subtitles to UTF-8 so you can edit/resync them
function fixsubs()
{
    if [ -z "$1" ]; then
        echo "Please give subtitle file"
    else
        # Convert to UTF8
        iconv -f GREEK -t UTF8 "$1" > "$1".tmp0
        # Getting rid of trailing whitespace
        tr -d "\015" < "$1".tmp0 > "$1".tmp1
        rm "$1".tmp0
        mv "$1".tmp1 "$1"
    fi
}
